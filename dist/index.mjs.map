{"version":3,"sources":["../src/utils.ts","../src/hook.ts","../src/plugin.ts"],"sourcesContent":["import {\r\n    RO_Sitemap,\r\n    RouteDefinitions,\r\n    RouteDefinition,\r\n    Sitemap,\r\n    UserAgentDirective,\r\n} from \"./types\";\r\nimport fs from \"fs\";\r\n\r\nexport const encodeXML = (str: string) => {\r\n    return str\r\n        .replace(/&/g, \"&amp;\")\r\n        .replace(/</g, \"&lt;\")\r\n        .replace(/>/g, \"&gt;\")\r\n        .replace(/\"/g, \"&quot;\")\r\n        .replace(/'/g, \"&apos;\");\r\n};\r\n\r\nexport const generateSitemap = <S extends RO_Sitemap>(\r\n    definitions: RouteDefinitions<S>,\r\n    baseUrl: string,\r\n    sitemap: S\r\n) => {\r\n    // Instantiate a routes object with all the static routes\r\n    // The will be override if you pass custom settings\r\n    const routes: Record<string, RouteDefinition<boolean>> = Object.keys(sitemap).reduce(\r\n        (acc, route) => {\r\n            const isDynamic = route.includes(\"[\");\r\n            if (!isDynamic) {\r\n                Object.assign(acc, {\r\n                    [route]: {\r\n                        path: route,\r\n                    } as RouteDefinition<boolean>,\r\n                });\r\n            }\r\n            return acc;\r\n        },\r\n        {}\r\n    );\r\n\r\n    // Add custom route data to the routes object\r\n    Object.entries(sitemap).forEach(([route]) => {\r\n        const RouteDefinition = definitions[route as keyof typeof definitions];\r\n        if (RouteDefinition) {\r\n            if (Array.isArray(RouteDefinition)) {\r\n                RouteDefinition.forEach((definition) => {\r\n                    Object.assign(routes, { [definition.path]: definition });\r\n                });\r\n            } else {\r\n                Object.assign(routes, { [RouteDefinition?.path || route]: RouteDefinition });\r\n            }\r\n        }\r\n    });\r\n\r\n    // Build and return sitemap\r\n    // refs : https://github.com/sveltejs/kit/issues/1142#issuecomment-1032407693 https://github.com/Shopify/hydrogen/blob/1de3864214d04d9214e323d7f0a953c7b9309b7b/templates/demo-store/src/routes/sitemap.xml.server.ts\r\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\r\n${Object.entries(routes)\r\n    .map(([r, { path, changeFreq, image, lastMod }]) => {\r\n        return `  <url>\r\n    <loc>${baseUrl}${path || r}</loc>\r\n  \r\n  ${lastMod ? `<lastmod>${lastMod}</lastmod>` : \"\"}\r\n  ${changeFreq ? `<changefreq>${changeFreq}</changefreq>` : \"\"}\r\n  ${\r\n      image\r\n          ? `\r\n    <image:image>\r\n      <image:loc>${encodeXML(image.url)}</image:loc>\r\n      <image:title>${encodeXML(image.title ?? \" \")}</image:title>\r\n      <image:caption>${encodeXML(image.altText ?? \" \")}</image:caption>\r\n    </image:image>`\r\n          : \"\"\r\n  }\r\n  </url>\r\n  `;\r\n    })\r\n    .join(\"\\n\")}\r\n</urlset>`;\r\n};\r\n\r\nexport const generateRobots = <S extends RO_Sitemap>(\r\n    robots: boolean | UserAgentDirective<S> | UserAgentDirective<S>[],\r\n    baseUrl: string\r\n) => {\r\n    // Instantiate the agents to render array\r\n    const agentsToRender: {\r\n        agent: string;\r\n        crawlDelay?: number;\r\n        allow: string[];\r\n        disallow: string[];\r\n    }[] = [];\r\n\r\n    const parseAgent = (agent: UserAgentDirective<S>) => {\r\n        const infos = Object.entries(agent.paths).reduce<{ allow: string[]; disallow: string[] }>(\r\n            (acc, [route, allow]) => {\r\n                if (allow) {\r\n                    acc.allow.push(route);\r\n                } else {\r\n                    acc.disallow.push(route);\r\n                }\r\n                return acc;\r\n            },\r\n            { allow: [], disallow: [] }\r\n        );\r\n\r\n        // Use the same config for all the user agents\r\n        if (Array.isArray(agent.userAgent)) {\r\n            agent.userAgent.forEach((a) => {\r\n                agentsToRender.push({\r\n                    agent: a,\r\n                    crawlDelay: agent.crawlDelay,\r\n                    ...infos,\r\n                });\r\n            });\r\n        } else {\r\n            agentsToRender.push({\r\n                agent: agent.userAgent || \"*\",\r\n                crawlDelay: agent.crawlDelay,\r\n                ...infos,\r\n            });\r\n        }\r\n    };\r\n\r\n    // Build a default robot.txt for all user-agents\r\n    if (typeof robots === \"boolean\") {\r\n        agentsToRender.push({\r\n            agent: \"*\",\r\n            allow: robots === true ? [\"/\"] : [],\r\n            disallow: robots === false ? [\"/\"] : [],\r\n        });\r\n    } else if (!Array.isArray(robots)) {\r\n        parseAgent(robots);\r\n    } else {\r\n        robots.forEach(parseAgent);\r\n    }\r\n\r\n    return `${agentsToRender\r\n        .map(({ agent, crawlDelay, allow, disallow }) =>\r\n            `User-agent: ${agent}\r\nSitemap: ${baseUrl}/sitemap.xml\r\n${crawlDelay ? `Crawl-delay: ${crawlDelay}` : \"\"}\r\n${allow.map((route) => `Allow: ${route}`).join(\"\\n\")}\r\n${disallow.map((route) => `Disallow: ${route}`).join(\"\\n\")}\r\n`\r\n                // Make it pretty\r\n                .replace(/\\n\\n/g, \"\\n\")\r\n                .replace(/\\n\\n/g, \"\\n\")\r\n        )\r\n        .join(\"\\n\")}\r\n`.trim();\r\n};\r\n\r\n// function to recursively traverse a directory and return if some of the files are named +page.svelte\r\nconst hasPageInside = (path: string): boolean => {\r\n    const files = fs.readdirSync(path);\r\n    if (files.some((file) => file === \"+page.svelte\")) return true;\r\n    return files.some((file: string) => {\r\n        const newPath = path + \"/\" + file;\r\n        if (fs.statSync(newPath).isDirectory()) {\r\n            return hasPageInside(newPath);\r\n        } else {\r\n            return false;\r\n        }\r\n    });\r\n};\r\n\r\nexport const getRoutes = (dir: string): Sitemap => {\r\n    let routes: Sitemap = {};\r\n    const traverseRoutes = (path: string) => {\r\n        const isDirectory = fs.statSync(path).isDirectory();\r\n        const isPageFolder = isDirectory && hasPageInside(path);\r\n        if (isDirectory && isPageFolder) {\r\n            fs.readdirSync(path).forEach((file) => traverseRoutes(path + \"/\" + file));\r\n        }\r\n\r\n        const id = path.replace(dir, \"\").replace(\"/+page.svelte\", \"\");\r\n\r\n        const dirBase = path.replace(\"/+page.svelte\", \"\");\r\n\r\n        const isFolder =\r\n            fs.statSync(dirBase).isDirectory() &&\r\n            fs.readdirSync(path.replace(\"/+page.svelte\", \"\")).some((p) => {\r\n                return fs.statSync(dirBase + \"/\" + p).isDirectory();\r\n            });\r\n        if (!path.endsWith(\"+page.svelte\") && !isFolder) return;\r\n\r\n        Object.assign(routes, { [id || \"/\"]: isFolder });\r\n    };\r\n    fs.readdirSync(dir).forEach((file) => traverseRoutes(dir + \"/\" + file));\r\n\r\n    return routes;\r\n};\r\n","import { type Handle } from \"@sveltejs/kit\";\r\nimport type { SitemapParams, RO_Sitemap } from \"./types\";\r\nimport { generateRobots, generateSitemap } from \"./utils\";\r\n\r\nexport const sitemapHook =\r\n    <S extends RO_Sitemap>(sitemap: S, params: SitemapParams<S> | undefined = {}): Handle =>\r\n    async ({ event, resolve }) => {\r\n        if (event.url.host.startsWith(\"www.\")) {\r\n            return new Response(null, {\r\n                status: 301,\r\n                headers: {\r\n                    location: event.url.href.replace(\"//www.\", \"//\"),\r\n                },\r\n            });\r\n        }\r\n\r\n        if (event.url.pathname === \"/sitemap.xml\") {\r\n            // Get dynamic custom definition for app routes\r\n            const routeDefinitions = params.getRoutes ? await params.getRoutes(event) : {};\r\n            return new Response(generateSitemap(routeDefinitions, event.url.origin, sitemap), {\r\n                status: 200,\r\n                headers: {\r\n                    \"Content-Type\": \"application/xml\",\r\n                },\r\n            });\r\n        }\r\n\r\n        if (event.url.pathname === \"/robots.txt\") {\r\n            // Get dynamic robots directives\r\n            const robots = params.getRobots ? await params.getRobots(event) : true;\r\n\r\n            // Build and return the robots.txt\r\n            return new Response(generateRobots<S>(robots, event.url.origin), {\r\n                headers: {\r\n                    \"content-type\": \"text/plain\",\r\n                    // Cache it for 24 hours\r\n                    \"cache-control\": `max-age=${60 * 60 * 24}`,\r\n                },\r\n            });\r\n        }\r\n\r\n        return resolve(event);\r\n    };\r\n","import fs from \"fs\";\r\nimport type { ViteDevServer } from \"vite\";\r\nimport { SitemapPluginParams } from \"./types\";\r\nimport { getRoutes } from \"./utils\";\r\n\r\nexport const sitemapPlugin = ({\r\n  routesDir = \"./src/routes\",\r\n  sitemapFile = \"./src/sitemap.ts\"\r\n}: SitemapPluginParams = {}) => {\r\n  function updateSitemap() {\r\n    fs.writeFileSync(\r\n      sitemapFile,\r\n      `import type { RO_Sitemap } from 'sveltekit-sitemap';\r\n\r\nexport const sitemap = (<const>${JSON.stringify(getRoutes(routesDir), null, 3).replace(\r\n        /\\uFFFF/g,\r\n        '\\\\\"'\r\n      )}) satisfies RO_Sitemap\r\n\r\nexport type Sitemap = typeof sitemap\r\n`\r\n    );\r\n  }\r\n  updateSitemap();\r\n\r\n  return {\r\n    name: \"sveltekit-sitemap\",\r\n    configureServer(server: ViteDevServer) {\r\n      server.watcher\r\n        .add([routesDir])\r\n        .on(\"add\", updateSitemap)\r\n        .on(\"unlink\", updateSitemap)\r\n        .on(\"unlinkDir\", updateSitemap);\r\n    }\r\n  };\r\n};\r\n"],"mappings":"siBAOA,OAAOA,MAAQ,KAER,IAAMC,EAAaC,GACfA,EACF,QAAQ,KAAM,OAAO,EACrB,QAAQ,KAAM,MAAM,EACpB,QAAQ,KAAM,MAAM,EACpB,QAAQ,KAAM,QAAQ,EACtB,QAAQ,KAAM,QAAQ,EAGlBC,EAAkB,CAC3BC,EACAC,EACAC,IACC,CAGD,IAAMC,EAAmD,OAAO,KAAKD,CAAO,EAAE,OAC1E,CAACE,EAAKC,KACgBA,EAAM,SAAS,GAAG,GAEhC,OAAO,OAAOD,EAAK,CACf,CAACC,CAAK,EAAG,CACL,KAAMA,CACV,CACJ,CAAC,EAEED,GAEX,CAAC,CACL,EAGA,cAAO,QAAQF,CAAO,EAAE,QAAQ,CAAC,CAACG,CAAK,IAAM,CACzC,IAAMC,EAAkBN,EAAYK,CAAiC,EACjEC,IACI,MAAM,QAAQA,CAAe,EAC7BA,EAAgB,QAASC,GAAe,CACpC,OAAO,OAAOJ,EAAQ,CAAE,CAACI,EAAW,IAAI,EAAGA,CAAW,CAAC,CAC3D,CAAC,EAED,OAAO,OAAOJ,EAAQ,CAAE,EAACG,GAAA,YAAAA,EAAiB,OAAQD,CAAK,EAAGC,CAAgB,CAAC,EAGvF,CAAC,EAIM;AAAA;AAAA,EAET,OAAO,QAAQH,CAAM,EAClB,IAAI,CAAC,CAACK,EAAG,CAAE,KAAAC,EAAM,WAAAC,EAAY,MAAAC,EAAO,QAAAC,CAAQ,CAAC,IAAM,CA3DxD,IAAAC,EAAAC,EA4DQ,MAAO;AAAA,WACJb,IAAUQ,GAAQD;AAAA;AAAA,IAEzBI,EAAU,YAAYA,cAAsB;AAAA,IAC5CF,EAAa,eAAeA,iBAA4B;AAAA,IAEtDC,EACM;AAAA;AAAA,mBAEOd,EAAUc,EAAM,GAAG;AAAA,qBACjBd,GAAUgB,EAAAF,EAAM,QAAN,KAAAE,EAAe,GAAG;AAAA,uBAC1BhB,GAAUiB,EAAAH,EAAM,UAAN,KAAAG,EAAiB,GAAG;AAAA,oBAEzC;AAAA;AAAA,GAIR,CAAC,EACA,KAAK;AAAA,CAAI;AAAA,UAEd,EAEaC,EAAiB,CAC1BC,EACAf,IACC,CAED,IAAMgB,EAKA,CAAC,EAEDC,EAAcC,GAAiC,CACjD,IAAMC,EAAQ,OAAO,QAAQD,EAAM,KAAK,EAAE,OACtC,CAACf,EAAK,CAACC,EAAOgB,CAAK,KACXA,EACAjB,EAAI,MAAM,KAAKC,CAAK,EAEpBD,EAAI,SAAS,KAAKC,CAAK,EAEpBD,GAEX,CAAE,MAAO,CAAC,EAAG,SAAU,CAAC,CAAE,CAC9B,EAGI,MAAM,QAAQe,EAAM,SAAS,EAC7BA,EAAM,UAAU,QAASG,GAAM,CAC3BL,EAAe,KAAKM,EAAA,CAChB,MAAOD,EACP,WAAYH,EAAM,YACfC,EACN,CACL,CAAC,EAEDH,EAAe,KAAKM,EAAA,CAChB,MAAOJ,EAAM,WAAa,IAC1B,WAAYA,EAAM,YACfC,EACN,CAET,EAGA,OAAI,OAAOJ,GAAW,UAClBC,EAAe,KAAK,CAChB,MAAO,IACP,MAAOD,IAAW,GAAO,CAAC,GAAG,EAAI,CAAC,EAClC,SAAUA,IAAW,GAAQ,CAAC,GAAG,EAAI,CAAC,CAC1C,CAAC,EACO,MAAM,QAAQA,CAAM,EAG5BA,EAAO,QAAQE,CAAU,EAFzBA,EAAWF,CAAM,EAKd,GAAGC,EACL,IAAI,CAAC,CAAE,MAAAE,EAAO,WAAAK,EAAY,MAAAH,EAAO,SAAAI,CAAS,IACvC,eAAeN;AAAA,WAChBlB;AAAA,EACTuB,EAAa,gBAAgBA,IAAe;AAAA,EAC5CH,EAAM,IAAKhB,GAAU,UAAUA,GAAO,EAAE,KAAK;AAAA,CAAI;AAAA,EACjDoB,EAAS,IAAKpB,GAAU,aAAaA,GAAO,EAAE,KAAK;AAAA,CAAI;AAAA,EAGxC,QAAQ,QAAS;AAAA,CAAI,EACrB,QAAQ,QAAS;AAAA,CAAI,CAC9B,EACC,KAAK;AAAA,CAAI;AAAA,EAChB,KAAK,CACP,EAGMqB,EAAiBjB,GAA0B,CAC7C,IAAMkB,EAAQC,EAAG,YAAYnB,CAAI,EACjC,OAAIkB,EAAM,KAAME,GAASA,IAAS,cAAc,EAAU,GACnDF,EAAM,KAAME,GAAiB,CAChC,IAAMC,EAAUrB,EAAO,IAAMoB,EAC7B,OAAID,EAAG,SAASE,CAAO,EAAE,YAAY,EAC1BJ,EAAcI,CAAO,EAErB,EAEf,CAAC,CACL,EAEaC,EAAaC,GAAyB,CAC/C,IAAI7B,EAAkB,CAAC,EACjB8B,EAAkBxB,GAAiB,CACrC,IAAMyB,EAAcN,EAAG,SAASnB,CAAI,EAAE,YAAY,EAC5C0B,EAAeD,GAAeR,EAAcjB,CAAI,EAClDyB,GAAeC,GACfP,EAAG,YAAYnB,CAAI,EAAE,QAASoB,GAASI,EAAexB,EAAO,IAAMoB,CAAI,CAAC,EAG5E,IAAMO,EAAK3B,EAAK,QAAQuB,EAAK,EAAE,EAAE,QAAQ,gBAAiB,EAAE,EAEtDK,EAAU5B,EAAK,QAAQ,gBAAiB,EAAE,EAE1C6B,EACFV,EAAG,SAASS,CAAO,EAAE,YAAY,GACjCT,EAAG,YAAYnB,EAAK,QAAQ,gBAAiB,EAAE,CAAC,EAAE,KAAM,GAC7CmB,EAAG,SAASS,EAAU,IAAM,CAAC,EAAE,YAAY,CACrD,EACD,CAAC5B,EAAK,SAAS,cAAc,GAAK,CAAC6B,GAEvC,OAAO,OAAOnC,EAAQ,CAAE,CAACiC,GAAM,GAAG,EAAGE,CAAS,CAAC,CACnD,EACA,OAAAV,EAAG,YAAYI,CAAG,EAAE,QAASH,GAASI,EAAeD,EAAM,IAAMH,CAAI,CAAC,EAE/D1B,CACX,EC7LO,IAAMoC,EACT,CAAuBC,EAAYC,EAAuC,CAAC,IACpEC,GAAuBC,EAAA,QAAvBD,GAAuB,UAAvB,CAAE,MAAAE,EAAO,QAAAC,CAAQ,EAAM,CAC1B,GAAID,EAAM,IAAI,KAAK,WAAW,MAAM,EAChC,OAAO,IAAI,SAAS,KAAM,CACtB,OAAQ,IACR,QAAS,CACL,SAAUA,EAAM,IAAI,KAAK,QAAQ,SAAU,IAAI,CACnD,CACJ,CAAC,EAGL,GAAIA,EAAM,IAAI,WAAa,eAAgB,CAEvC,IAAME,EAAmBL,EAAO,UAAY,MAAMA,EAAO,UAAUG,CAAK,EAAI,CAAC,EAC7E,OAAO,IAAI,SAASG,EAAgBD,EAAkBF,EAAM,IAAI,OAAQJ,CAAO,EAAG,CAC9E,OAAQ,IACR,QAAS,CACL,eAAgB,iBACpB,CACJ,CAAC,EAGL,GAAII,EAAM,IAAI,WAAa,cAAe,CAEtC,IAAMI,EAASP,EAAO,UAAY,MAAMA,EAAO,UAAUG,CAAK,EAAI,GAGlE,OAAO,IAAI,SAASK,EAAkBD,EAAQJ,EAAM,IAAI,MAAM,EAAG,CAC7D,QAAS,CACL,eAAgB,aAEhB,gBAAiB,WAAW,GAAK,GAAK,IAC1C,CACJ,CAAC,EAGL,OAAOC,EAAQD,CAAK,CACxB,GC1CJ,OAAOM,MAAQ,KAKR,IAAMC,EAAgB,CAAC,CAC5B,UAAAC,EAAY,eACZ,YAAAC,EAAc,kBAChB,EAAyB,CAAC,IAAM,CAC9B,SAASC,GAAgB,CACvBC,EAAG,cACDF,EACA;AAAA;AAAA,iCAE2B,KAAK,UAAUG,EAAUJ,CAAS,EAAG,KAAM,CAAC,EAAE,QACvE,UACA,KACF;AAAA;AAAA;AAAA,CAIF,CACF,CACA,OAAAE,EAAc,EAEP,CACL,KAAM,oBACN,gBAAgBG,EAAuB,CACrCA,EAAO,QACJ,IAAI,CAACL,CAAS,CAAC,EACf,GAAG,MAAOE,CAAa,EACvB,GAAG,SAAUA,CAAa,EAC1B,GAAG,YAAaA,CAAa,CAClC,CACF,CACF","names":["fs","encodeXML","str","generateSitemap","definitions","baseUrl","sitemap","routes","acc","route","RouteDefinition","definition","r","path","changeFreq","image","lastMod","_a","_b","generateRobots","robots","agentsToRender","parseAgent","agent","infos","allow","a","__spreadValues","crawlDelay","disallow","hasPageInside","files","fs","file","newPath","getRoutes","dir","traverseRoutes","isDirectory","isPageFolder","id","dirBase","isFolder","sitemapHook","sitemap","params","_0","__async","event","resolve","routeDefinitions","generateSitemap","robots","generateRobots","fs","sitemapPlugin","routesDir","sitemapFile","updateSitemap","fs","getRoutes","server"]}